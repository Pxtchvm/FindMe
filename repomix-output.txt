This file is a merged representation of the entire codebase, combined into a single document.
Generated by Repomix on: 2025-02-11T10:28:28.895Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
context.txt
findme-app/.gitignore
findme-app/backend/.env
findme-app/backend/package.json
findme-app/backend/src/config/db.config.js
findme-app/backend/src/controllers/auth.controller.js
findme-app/backend/src/index.js
findme-app/backend/src/routes/auth.routes.js
findme-app/package.json
findme-app/public/index.html
findme-app/public/manifest.json
findme-app/public/robots.txt
findme-app/README.md
findme-app/src/App.css
findme-app/src/App.js
findme-app/src/components/Layout/Navbar.js
findme-app/src/index.css
findme-app/src/index.js
findme-app/src/pages/Login/Login.js
findme-app/src/pages/Register/Register.js
findme-app/src/reportWebVitals.js
README.md

================================================================
Files
================================================================

================
File: context.txt
================
# FindMe: School Lost and Found System - Project Status

## Current Project State

### Frontend (React)
- Created using create-react-app
- Basic folder structure set up:
  ```
  src/
    ├── components/
    ├── pages/
    ├── utils/
    ├── assets/
    ├── services/
    └── context/
  ```
- Implemented components:
  - Navbar (with basic navigation)
  - Login page (with form and state management)
  - Registration page (with form and state management)
- Using Material-UI for components
- Basic routing implemented

### Backend (Node.js/Express)
- Basic Express server setup
- Folder structure created:
  ```
  backend/
    ├── src/
    │   ├── routes/
    │   ├── controllers/
    │   ├── models/
    │   ├── middleware/
    │   ├── config/
    │   └── index.js
    ├── package.json
    └── .env
  ```
- Authentication routes and controllers implemented
- MySQL database connection configured
- Basic user table created

### Database (MySQL)
- Database created: `findme_db`
- Users table created with fields:
  - id
  - university_id
  - email
  - password
  - first_name
  - last_name
  - role
  - mobile_number
  - created_at

## Dependencies Installed

### Frontend
- react-router-dom
- axios
- @mui/material
- @mui/icons-material
- @emotion/react
- @emotion/styled

### Backend
- express
- mysql2
- cors
- dotenv
- bcryptjs
- jsonwebtoken
- nodemon (dev dependency)

## Environment Setup
- `.env` file configured with:
  ```
  PORT=5000
  DB_HOST=localhost
  DB_USER=root
  DB_PASSWORD=your_mysql_password
  DB_NAME=findme_db
  JWT_SECRET=your_jwt_secret_key
  ```

## Next Steps
1. Test the authentication endpoints using Postman
2. Connect frontend to backend:
   - Create API service in frontend
   - Implement authentication context
   - Add form submission handling
3. Implement protected routes
4. Create dashboard layout
5. Implement item reporting functionality

## API Endpoints (Currently Available)
- POST `/api/auth/register` - User registration
- POST `/api/auth/login` - User login

## Important Files
All source files and configurations have been created up to implementing the authentication endpoints.

## Notes
- The project uses Material-UI for styling
- Authentication uses JWT tokens
- Database is set up using MySQL Workbench
- Backend runs on port 5000, frontend on port 3000

## To Start Development
1. Frontend: `npm start` in project root
2. Backend: `npm run dev` in backend directory
3. Ensure MySQL is running with the correct database created

================
File: findme-app/.gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

npm-debug.log*
yarn-debug.log*
yarn-error.log*

================
File: findme-app/backend/.env
================
PORT=5000
DB_HOST=localhost
DB_USER=root
DB_PASSWORD=IwgssicpD2!
DB_NAME=findme_db
JWT_SECRET=your_jwt_secret_key

================
File: findme-app/backend/package.json
================
{
  "name": "backend",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "dependencies": {
    "bcryptjs": "^2.4.3",
    "cors": "^2.8.5",
    "dotenv": "^16.4.7",
    "express": "^4.21.2",
    "jsonwebtoken": "^9.0.2",
    "mysql2": "^3.12.0"
  },
  "devDependencies": {
    "nodemon": "^3.1.9"
  }
}

================
File: findme-app/backend/src/config/db.config.js
================
const mysql = require("mysql2");
require("dotenv").config();

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD, // Fixed the typo here
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

module.exports = pool.promise();

================
File: findme-app/backend/src/controllers/auth.controller.js
================
const db = require("../config/db.config");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");

const register = async (req, res) => {
  try {
    const {
      universityId,
      email,
      password,
      firstName,
      lastName,
      role,
      mobileNumber,
    } = req.body;

    // Check if user already exists
    const [existingUsers] = await db.execute(
      "SELECT * FROM users WHERE university_id = ? OR email = ?",
      [universityId, email]
    );

    if (existingUsers.length > 0) {
      return res.status(400).json({ message: "User already exists" });
    }

    // Hash password
    const hashedPassword = await bcrypt.hash(password, 10);

    // Insert new user
    const [result] = await db.execute(
      "INSERT INTO users (university_id, email, password, first_name, last_name, role, mobile_number) VALUES (?, ?, ?, ?, ?, ?, ?)",
      [
        universityId,
        email,
        hashedPassword,
        firstName,
        lastName,
        role,
        mobileNumber,
      ]
    );

    res.status(201).json({ message: "User registered successfully" });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error" });
  }
};

const login = async (req, res) => {
  try {
    const { universityId, password } = req.body;

    // Find user
    const [users] = await db.execute(
      "SELECT * FROM users WHERE university_id = ?",
      [universityId]
    );

    if (users.length === 0) {
      return res.status(401).json({ message: "Invalid credentials" });
    }

    const user = users[0];

    // Check password
    const isValidPassword = await bcrypt.compare(password, user.password);
    if (!isValidPassword) {
      return res.status(401).json({ message: "Invalid credentials" });
    }

    // Generate JWT token
    const token = jwt.sign(
      {
        userId: user.id,
        role: user.role,
      },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    res.json({
      token,
      user: {
        id: user.id,
        universityId: user.university_id,
        email: user.email,
        firstName: user.first_name,
        lastName: user.last_name,
        role: user.role,
      },
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error" });
  }
};

module.exports = {
  register,
  login,
};

================
File: findme-app/backend/src/index.js
================
const express = require("express");
const cors = require("cors");
require("dotenv").config();
const authRoutes = require("./routes/auth.routes");

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// Routes
app.use("/api/auth", authRoutes);

// Basic route
app.get("/", (req, res) => {
  res.json({ message: "Welcome to FindMe API" });
});

// Port
const PORT = process.env.PORT || 5000;

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

================
File: findme-app/backend/src/routes/auth.routes.js
================
const express = require("express");
const router = express.Router();
const { register, login } = require("../controllers/auth.controller");

router.post("/register", register);
router.post("/login", login);

module.exports = router;

================
File: findme-app/package.json
================
{
  "name": "findme-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.0",
    "@mui/icons-material": "^6.4.2",
    "@mui/material": "^6.4.2",
    "axios": "^1.7.9",
    "cra-template": "1.2.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router-dom": "^7.1.5",
    "react-scripts": "5.0.1",
    "web-vitals": "^4.2.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: findme-app/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

================
File: findme-app/public/manifest.json
================
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

================
File: findme-app/public/robots.txt
================
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

================
File: findme-app/README.md
================
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

================
File: findme-app/src/App.css
================
.App {
  text-align: center;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

================
File: findme-app/src/App.js
================
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Navbar from "./components/Layout/Navbar";
import Login from "./pages/Login/Login";
import Register from "./pages/Register/Register";
import "./App.css";

function App() {
  return (
    <Router>
      <div className="App">
        <Navbar />
        <Routes>
          <Route path="/" element={<div>Home Page</div>} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/dashboard" element={<div>Dashboard</div>} />
        </Routes>
      </div>
    </Router>
  );
}

export default App;

================
File: findme-app/src/components/Layout/Navbar.js
================
import { AppBar, Toolbar, Typography, Button, Box } from "@mui/material";
import { useNavigate } from "react-router-dom";

const Navbar = () => {
  const navigate = useNavigate();

  return (
    <AppBar position="static">
      <Toolbar>
        <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
          FindMe
        </Typography>
        <Box>
          <Button color="inherit" onClick={() => navigate("/login")}>
            Login
          </Button>
          <Button color="inherit" onClick={() => navigate("/register")}>
            Register
          </Button>
        </Box>
      </Toolbar>
    </AppBar>
  );
};

export default Navbar;

================
File: findme-app/src/index.css
================
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

================
File: findme-app/src/index.js
================
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

================
File: findme-app/src/pages/Login/Login.js
================
import { useState } from "react";
import {
  Container,
  Paper,
  TextField,
  Button,
  Typography,
  Box,
} from "@mui/material";

const Login = () => {
  const [formData, setFormData] = useState({
    universityId: "",
    password: "",
  });

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // We'll implement actual login logic later
    console.log("Login attempt:", formData);
  };

  return (
    <Container maxWidth="sm">
      <Box sx={{ mt: 8 }}>
        <Paper elevation={3} sx={{ p: 4 }}>
          <Typography variant="h5" component="h1" gutterBottom>
            Login to FindMe
          </Typography>
          <form onSubmit={handleSubmit}>
            <TextField
              fullWidth
              label="University ID"
              name="universityId"
              value={formData.universityId}
              onChange={handleChange}
              margin="normal"
              required
            />
            <TextField
              fullWidth
              label="Password"
              name="password"
              type="password"
              value={formData.password}
              onChange={handleChange}
              margin="normal"
              required
            />
            <Button type="submit" variant="contained" fullWidth sx={{ mt: 3 }}>
              Login
            </Button>
          </form>
        </Paper>
      </Box>
    </Container>
  );
};

export default Login;

================
File: findme-app/src/pages/Register/Register.js
================
import { useState } from "react";
import {
  Container,
  Paper,
  TextField,
  Button,
  Typography,
  Box,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
} from "@mui/material";

const Register = () => {
  const [formData, setFormData] = useState({
    universityId: "",
    email: "",
    password: "",
    confirmPassword: "",
    firstName: "",
    lastName: "",
    role: "student", // default role
    mobileNumber: "", // optional
  });

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    // Validation
    if (formData.password !== formData.confirmPassword) {
      alert("Passwords don't match!");
      return;
    }
    // We'll implement actual registration logic later
    console.log("Registration attempt:", formData);
  };

  return (
    <Container maxWidth="sm">
      <Box sx={{ mt: 4, mb: 4 }}>
        <Paper elevation={3} sx={{ p: 4 }}>
          <Typography variant="h5" component="h1" gutterBottom>
            Register for FindMe
          </Typography>
          <form onSubmit={handleSubmit}>
            <TextField
              fullWidth
              label="University ID"
              name="universityId"
              value={formData.universityId}
              onChange={handleChange}
              margin="normal"
              required
            />
            <TextField
              fullWidth
              label="Email"
              name="email"
              type="email"
              value={formData.email}
              onChange={handleChange}
              margin="normal"
              required
            />
            <TextField
              fullWidth
              label="First Name"
              name="firstName"
              value={formData.firstName}
              onChange={handleChange}
              margin="normal"
              required
            />
            <TextField
              fullWidth
              label="Last Name"
              name="lastName"
              value={formData.lastName}
              onChange={handleChange}
              margin="normal"
              required
            />
            <FormControl fullWidth margin="normal">
              <InputLabel>Role</InputLabel>
              <Select
                name="role"
                value={formData.role}
                label="Role"
                onChange={handleChange}
                required
              >
                <MenuItem value="student">Student</MenuItem>
                <MenuItem value="staff">Staff</MenuItem>
              </Select>
            </FormControl>
            <TextField
              fullWidth
              label="Mobile Number (Optional)"
              name="mobileNumber"
              value={formData.mobileNumber}
              onChange={handleChange}
              margin="normal"
            />
            <TextField
              fullWidth
              label="Password"
              name="password"
              type="password"
              value={formData.password}
              onChange={handleChange}
              margin="normal"
              required
            />
            <TextField
              fullWidth
              label="Confirm Password"
              name="confirmPassword"
              type="password"
              value={formData.confirmPassword}
              onChange={handleChange}
              margin="normal"
              required
            />
            <Button type="submit" variant="contained" fullWidth sx={{ mt: 3 }}>
              Register
            </Button>
          </form>
        </Paper>
      </Box>
    </Container>
  );
};

export default Register;

================
File: findme-app/src/reportWebVitals.js
================
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

================
File: README.md
================
# FindMe: School Lost and Found System

A web-based Lost and Found Management System for Mapua University Makati that streamlines the process of logging, tracking, and claiming lost items on campus.

## 🎯 Problem Statement

At Mapua University Makati, students and staff frequently lose personal items on campus, such as ID cards, gadgets, books, and bags. The current manual process for handling lost-and-found items is inefficient and time-consuming, often leading to unclaimed items and frustrated students. Lost items may sit unrecorded, misplaced, or never reach their owners due to the lack of a proper system for reporting and tracking.

## 💡 Solution

Our web-based Lost and Found Management System provides a user-friendly interface for students and staff to report lost or found items and enables administrators to manage these reports effectively. The system streamlines the entire process from logging to claiming items.

## ✨ Key Features

- **User Roles Management**: Different access levels and permissions for students, staff, and administrators
- **Item Reporting**: Easy-to-use interface for reporting lost or found items
- **Search Functionality**: Advanced search capabilities to find specific items
- **Claimant Verification**: Secure system to verify legitimate item claims
- **Item Status Tracking**: Real-time tracking of item status
- **Notifications**: Automated alerts for matches and updates
- **Admin Dashboard**: Comprehensive overview and management tools
- **Photo Upload**: Visual documentation of found items

## 🛠️ Technology Stack

- **Frontend**: HTML, CSS, JavaScript (React.js/Vue.js)
- **Backend**: PHP (Laravel) or Python (Django/Flask)
- **Database**: MySQL or SQLite
- **Hosting**: Local server (XAMPP/WAMP) or cloud deployment (Heroku/AWS)
- **Notifications**: Email services (Gmail SMTP) or SMS APIs (Twilio)

## 👥 Team Members

- Rojo, Kurt Wilson T. (Team Lead)
- De Guzman, Katrina Ericka C.
- Del Carmen, Tyrell John C.
- Duldulao, Jacob O.
- Rosal, Francine Ann M.

## 🏢 Client

Mapua Administration (Lost and Found Department)

## 🎓 Course Information

- **Course**: CS155-1 Software Engineering 1 (Laboratory)
- **School**: Mapua University - School of Information Technology
- **Date**: December 17, 2024

## 📝 License

[MIT License](LICENSE)

## 🤝 Contributing

If you'd like to contribute, please fork the repository and create a pull request. You can also simply open an issue with the tag "enhancement" or "bug".

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the Branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

## 📞 Contact

For any inquiries about this project, please contact the team lead:
Kurt Wilson T. Rojo - [Add contact information if appropriate]

---
*This project is developed as part of the CS155-1 Software Engineering 1 Laboratory course at Mapua University.*



================================================================
End of Codebase
================================================================
